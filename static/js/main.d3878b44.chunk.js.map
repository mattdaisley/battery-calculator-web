{"version":3,"sources":["Calculator/Module.ts","Calculator/Pack.ts","Calculator/Calculator.ts","PackRow.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Module","in_series","in_parallel","cell_type","cellCount","vNom","vnom","amps","storedEnergy","capacity","ampHours","Pack","name","modules","cellType","reduce","prev","curr","totalPrice","price","packTypes","pack_types_json","Calculator","BuildPack","module_count","module_in_series","module_in_parallel","pack","i","mod","push","PadText","value","width","toString","Array","join","slice","PrintDivider","PrintCellType","quantity","source","PrintPackDetailsHeader","FindPack","id","filter","ComparePacksForCellType","packs","result","forEach","packConfig","PackRow","PackCell","item","style","minWidth","textAlign","length","Intl","NumberFormat","format","currency","App","cell_types","cell_types_json","calc","useState","selectedType","updateSelectType","packComparisons","className","onChange","changedToType","parseInt","currentTarget","map","type","index","key","details","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d3878b44.chunk.js","sourcesContent":["import { CellType } from \"./CellType\";\nexport class Module {\n  in_series: number = 0;\n  in_parallel: number = 0;\n  cell_type?: CellType;\n  cellCount = () => this.in_series * this.in_parallel;\n  vNom = () => (!this.cell_type ? 0 : this.in_series * this.cell_type.vnom);\n  amps = () => (!this.cell_type ? 0 : this.in_parallel * this.cell_type.amps);\n  storedEnergy = () =>\n    !this.cell_type\n      ? 0\n      : this.in_parallel * this.vNom() * this.cell_type.capacity;\n  ampHours = () =>\n    !this.cell_type ? 0 : this.in_parallel * this.cell_type.capacity;\n}\n","import { Module } from \"./Module\";\nimport { CellType } from \"./CellType\";\nexport class Pack {\n  name: string = \"\";\n  modules: Module[] = [];\n  cellType?: CellType;\n  cellCount = () =>\n    this.modules.reduce((prev, curr) => prev + curr.cellCount(), 0);\n  totalPrice = () =>\n    this.modules.reduce(\n      (prev, curr) =>\n        // !curr.cell_type ? 0 : prev + curr.cellCount() * curr.cell_type.price,\n        !this.cellType ? 0 : prev + curr.cellCount() * this.cellType.price,\n      0\n    );\n  vNom = () => this.modules.reduce((prev, curr) => prev + curr.vNom(), 0);\n  amps = () => this.modules.reduce((prev, curr) => prev + curr.amps(), 0);\n  // returned in kWh. 1 kWh = 1000 Wh\n  storedEnergy = () =>\n    this.modules.reduce((prev, curr) => prev + curr.storedEnergy(), 0);\n  ampHours = () =>\n    this.modules.reduce((prev, curr) => prev + curr.ampHours(), 0);\n}\n","import { CellType } from \"./CellType\";\nimport { Module } from \"./Module\";\nimport { PackConfig } from \"./PackConfig\";\nimport { Pack } from \"./Pack\";\n\nimport * as pack_types_json from \"./packs.json\";\nexport const packTypes: PackConfig[] = (<any>pack_types_json).packs;\nexport class Calculator {\n  BuildPack = (\n    {\n      name,\n      cell_type,\n      module_count,\n      module_in_series,\n      module_in_parallel\n    }: PackConfig,\n    cellType: CellType\n  ) => {\n    var pack = new Pack();\n    pack.cellType = cellType;\n    pack.name = name;\n    for (let i = 0; i < module_count; i++) {\n      var mod = new Module();\n      mod.in_series = module_in_series;\n      mod.in_parallel = module_in_parallel;\n      mod.cell_type = cellType;\n      pack.modules.push(mod);\n    }\n    return pack;\n  };\n  PadText = (value: any, width: number = 15) => {\n    return (value.toString() + new Array(width).join(\" \")).slice(0, width);\n  };\n  PrintDivider = () => {\n    return new Array(200).join(\"-\");\n  };\n  PrintCellType = (cell_type: CellType) => {\n    return `${cell_type.capacity * 1000}mAh, ${cell_type.vnom}V, ${\n      cell_type.amps\n    }A - ${cell_type.name} - ${cell_type.quantity} cells at $${\n      cell_type.price\n    } each. From ${cell_type.source}`;\n  };\n  PrintPackDetailsHeader = (): string => {\n    // console.log(\n    //   `${packConfig.cell_type.capacity} Ah cells at $${packConfig.cell_type.price} each`\n    // );\n    return `\n      ${this.PadText(\" \", 50)} \n      ${this.PadText(\"modules\")} \n      ${this.PadText(\"in series\")} \n      ${this.PadText(\"in parallel\")} \n      ${this.PadText(\"total cells\")} \n      ${this.PadText(\"total price\")} \n      ${this.PadText(\"volts\", 10)} \n      ${this.PadText(\"Ah\", 10)} \n      ${this.PadText(\"kWh\")} \n      ${this.PadText(\"A\")} \n    `;\n  };\n\n  FindPack = (id: Number): PackConfig =>\n    (<any>packTypes).filter((pack: PackConfig) => pack.id == id)[0];\n  ComparePacksForCellType = (\n    packs: PackConfig[],\n    cellType: CellType\n  ): Pack[] => {\n    let result: Pack[] = [];\n\n    // result.push(this.PrintCellType(cell_type));\n    // result.push(this.PrintPackDetailsHeader());\n    packs.forEach(packConfig =>\n      result.push(this.BuildPack(packConfig, cellType))\n    );\n    return result;\n  };\n}\n","import React from \"react\";\nimport { Pack } from \"./Calculator/Pack\";\n\ninterface PackRowProps {\n  pack: Pack;\n}\n\nexport default function PackRow({ pack }: PackRowProps) {\n  return (\n    <tr>\n      <PackCell item={pack.name} style={{ minWidth: 300, textAlign: \"left\" }} />\n      <PackCell item={pack.modules.length} />\n      <PackCell item={pack.modules[0].in_series} />\n      <PackCell item={pack.modules[0].in_parallel} />\n      <PackCell\n        item={new Intl.NumberFormat(\"en-US\").format(pack.cellCount())}\n      />\n      <PackCell\n        item={new Intl.NumberFormat(\"en-US\", {\n          style: \"currency\",\n          currency: \"USD\"\n        }).format(pack.totalPrice())}\n      />\n      <PackCell item={new Intl.NumberFormat(\"en-US\").format(pack.vNom())} />\n      <PackCell item={new Intl.NumberFormat(\"en-US\").format(pack.ampHours())} />\n      <PackCell\n        item={new Intl.NumberFormat(\"en-US\").format(pack.storedEnergy() / 1000)}\n      />\n      <PackCell item={new Intl.NumberFormat(\"en-US\").format(pack.amps())} />\n    </tr>\n  );\n}\n\nfunction PackCell({ item, style }: any) {\n  return <td style={{ minWidth: 100, ...style }}>{item}</td>;\n}\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport * as cell_types_json from \"./Calculator/celltypes.json\";\n\nimport { Calculator } from \"./Calculator/Calculator\";\nimport { CellType } from \"./Calculator/CellType\";\n\nimport PackRow from \"./PackRow\";\n\nconst App: React.FC = () => {\n  const cell_types: CellType[] = cell_types_json.cell_types;\n  const calc = new Calculator();\n\n  // DIY electrinc motorcycyle 72v\n  var ebikePacks = [\n    calc.FindPack(0),\n    calc.FindPack(1),\n    calc.FindPack(3),\n    calc.FindPack(21),\n    calc.FindPack(22),\n\n    calc.FindPack(19),\n    calc.FindPack(17),\n    calc.FindPack(18),\n    calc.FindPack(20),\n\n    calc.FindPack(5),\n    calc.FindPack(15),\n    calc.FindPack(16),\n\n    calc.FindPack(6),\n    calc.FindPack(7),\n\n    calc.FindPack(9),\n    calc.FindPack(10)\n  ];\n  var packs = ebikePacks;\n\n  // 72v\n  // var packs = [findPack(12), findPack(13), findPack(14)];\n\n  // tesla packs\n  // var packs = [findPack(0), findPack(1), findPack(2), findPack(3)];\n\n  let [selectedType, updateSelectType] = useState(7);\n  const cellType = cell_types[selectedType];\n\n  let packComparisons = calc.ComparePacksForCellType(packs, cellType);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <select\n          value={selectedType}\n          onChange={changedToType =>\n            updateSelectType(parseInt(changedToType.currentTarget.value))\n          }\n        >\n          {cell_types.map((type, index) => (\n            <option value={index} key={index}>\n              {type.name}, ${type.price} per cell\n            </option>\n          ))}\n        </select>\n        <table style={{ width: \"100%\" }}>\n          <tbody>\n            <tr>\n              <td>Pack Name</td>\n              <td>modules</td>\n              <td>in series</td>\n              <td>in parallel</td>\n              <td>total cells</td>\n              <td>total price</td>\n              <td>volts</td>\n              <td>Ah</td>\n              <td>kWh</td>\n              <td>A</td>\n            </tr>\n            {packComparisons.map((details, index) => (\n              <PackRow key={index} pack={details} />\n            ))}\n          </tbody>\n        </table>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}